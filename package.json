{
  "name": "cc65-vice",
  "displayName": "VS65 Debugger",
  "version": "5.2.0",
  "publisher": "entan-gl",
  "description": "An extension to debug CC65 running in VICE (Commodore) or Mesen (Nintendo) emulators.",
  "author": {
    "name": "empathicqubit",
    "email": "empathicqubit@entan.gl"
  },
  "license": "MIT",
  "keywords": [
    "nes",
    "mesen",
    "cc65",
    "vice",
    "c64",
    "cbm",
    "pet",
    "commodore",
    "nintendo",
    "debug"
  ],
  "engines": {
    "vscode": "^1.54.0"
  },
  "icon": "images/icon.png",
  "categories": [
    "Debuggers"
  ],
  "private": true,
  "repository": {
    "type": "git",
    "url": "https://github.com/empathicqubit/vscode-cc65-debugger"
  },
  "bugs": {
    "url": "https://github.com/empathicqubit/vscode-cc65-debugger/issues"
  },
  "scripts": {
    "distclean": "npm-run-all clean && shx rm -rf node_modules .pnpm_store 3rdparty/cc65 3rdparty/c64tff",
    "clean": "shx rm -r dist out obj || echo Done && make -C 3rdparty/cc65 clean && make -C src/__tests__/simple-project clean && make -C src/__tests__/asm-project clean",
    "chargen": "split-file -s ./system/C64/chargen 2",
    "pip": "pip3 install --user fonttools || pip install --user fonttools",
    "c64ttf": "npm-run-all pip && cd ./system/C64 && python3 ../../3rdparty/c64ttf/c64ttf.py -u chargen.sf-part1 -l chargen.sf-part2 -a -o ../../dist/c64.ttf || python ../../3rdparty/c64ttf/c64ttf.py -u chargen.sf-part1 -l chargen.sf-part2 -a -o ../../dist/c64.ttf",
    "submodules": "git submodule init && git submodule update || git submodule deinit --force --all",
    "sevenzip": "node -e \"const shx = require('shelljs'); shx.config.fatal = true; const zip7 = shx.which('7zz') || shx.which('7z'); require('child_process').execFileSync(zip7.toString(), process.argv.slice(1), { stdio: 'inherit' }); \"",
    "compiler:arch": "npm-run-all compiler:distdir && node ./compiler-arch.js",
    "compiler:base:extract": "npm-run-all \"sevenzip -- x -y 3rdparty/cc65/cc65.zip -odist/cc65\"",
    "compiler:base": "npm-run-all compiler:distdir && shx rm -f cc65.zip && node -e \"const shx = require('shelljs'); shx.config.fatal = true; const threads = require('os').cpus().length * 4; console.log('THREADS', threads); shx.exec('make -C 3rdparty/cc65 -j' + threads)\" && make -C 3rdparty/cc65 zip && npm-run-all compiler:base:extract",
    "compiler:distdir": "shx mkdir -p dist/cc65",
    "compiler:on-win32:win32_x64": "npm-run-all \"compiler:arch -- win32_x64\"",
    "compiler:on-win32": "echo \"WINDOWS CANNOT GENERATE FULL BUILDS!\" && npm-run-all --aggregate-output -p compiler:base compiler:on-win32:*",
    "compiler:quick:on-win32": "npm-run-all compiler:base compiler:on-win32:win32_x64",
    "compiler:on-linux:linux_x32": "npm-run-all \"compiler:arch -- linux_x32 i686-linux-gnu-\"",
    "compiler:on-linux:linux_x64": "npm-run-all \"compiler:arch -- linux_x64\"",
    "compiler:on-linux:linux_arm": "npm-run-all \"compiler:arch -- linux_arm arm-linux-gnueabi-\"",
    "compiler:on-linux:linux_ahf": "npm-run-all \"compiler:arch -- linux_ahf arm-linux-gnueabihf-\"",
    "compiler:on-linux:linux_arm64": "npm-run-all \"compiler:arch -- linux_arm64 aarch64-linux-gnu-\"",
    "compiler:on-linux:win32_x32": "npm-run-all \"compiler:arch -- win32_x32 i686-w64-mingw32-\"",
    "compiler:on-linux:win32_x64": "npm-run-all \"compiler:arch -- win32_x64 x86_64-w64-mingw32-\"",
    "compiler:on-linux": "npm-run-all --aggregate-output -p compiler:base compiler:on-linux:*",
    "compiler:quick:on-linux": "npm-run-all --aggregate-output -p compiler:base compiler:on-linux:linux_x64 compiler:on-linux:linux_x32",
    "compiler:on-darwin:darwin_arm64": "npm-run-all \"compiler:arch -- darwin_arm64\"",
    "compiler:on-darwin:darwin_x64": "npm-run-all \"compiler:arch -- darwin_x64\"",
    "compiler:on-darwin:darwin_x32": "npm-run-all \"compiler:arch -- darwin_x32\"",
    "compiler:on-darwin": "echo \"DARWIN CANNOT GENERATE FULL BUILDS!\" && node -e \"console.log('PROCESSOR', process.arch)\" && npm-run-all --aggregate-output -p compiler:base compiler:on-darwin:*",
    "compiler:quick:on-darwin": "npm-run-all compiler:base compiler:on-darwin:*",
    "compiler:choose": "node -e \"const shx = require('shelljs'); const [, quick] = process.argv; shx.config.fatal = true; shx.exec('npm-run-all compiler:' + (quick == '--quick' ? 'quick:' : '') + 'on-' + process.platform);\" --",
    "compiler": "node ./compiler.js",
    "compiler:quick": "node ./compiler.js --quick",
    "fontgen:force": "npm-run-all chargen c64ttf",
    "fontgen": "shx test -e ./dist/c64.ttf || npm-run-all fontgen:force",
    "styles": "shx cp -u src/ext/styles.css dist/styles.css",
    "kernal": "shx test -e dist/system || shx mkdir -p dist/system && shx cp -ru system/. dist/system",
    "mintty:arch": "node ./mintty-arch.js",
    "mintty:win32_x32": "npm-run-all \"mintty:arch -- win32_x32 PortableGit-2.33.0.2-32-bit.7z.exe\"",
    "mintty:win32_x64": "npm-run-all \"mintty:arch -- win32_x64 PortableGit-2.33.0.2-64-bit.7z.exe\"",
    "mintty": "npm-run-all --aggregate-output -p mintty:win32_x32 mintty:win32_x64",
    "mintty:quick": "node -e \"process.exit(process.platform == 'win32' ? 0 : 1)\" && npm-run-all mintty || echo \"MinTTY not built\"",
    "mesen:monitor": "shx test -e dist/mesen || shx mkdir -p dist/mesen && shx cp -ru 3rdparty/mesen-binary-monitor/. dist/mesen && shx cp -ru xvfb-wrapper.sh dist/mesen/xvfb-wrapper.sh && shx cp -ru mesen-settings.xml dist/mesen/settings.xml",
    "mesen:test": "shx test -e src/__tests__/mesendir || shx mkdir -p src/__tests__/mesendir && curl -s -L \"https://github.com/empathicqubit/Mesen-X/releases/download/trash/Mesen-Linux.2.zip\" > src/__tests__/mesendir/mesen.zip && npm-run-all \"sevenzip -- x -y src/__tests__/mesendir/mesen.zip -osrc/__tests__/mesendir\"",
    "nonjs:quick": "npm-run-all submodules && npm-run-all --aggregate-output -p styles fontgen kernal compiler:quick mintty:quick mesen:monitor",
    "nonjs": "npm-run-all submodules && npm-run-all --aggregate-output -p styles fontgen kernal compiler mintty mesen:monitor",
    "monitor": "webpack --config webpack.monitor.config.js --mode production",
    "monitor:debug": "webpack --config webpack.monitor.config.js --mode development",
    "webviews": "webpack --config webpack.webviews.config.js --mode production",
    "webviews:debug": "webpack --config webpack.webviews.config.js --mode development",
    "extension": "webpack --config webpack.extension.config.js --mode production",
    "extension:debug": "webpack --config webpack.extension.config.js --mode development",
    "not-extension": "webpack --config webpack.not-extension.config.js --mode production",
    "not-extension:debug": "node -e \"require('fs').writeFileSync('./webviews.run', process.pid.toString(), 'utf8') ; require('shelljs').exec('webpack serve --config webpack.not-extension.config.js --mode development')\"",
    "not-extension:debug:kill": "node -e \"process.kill(parseInt(require('fs').readFileSync('./webviews.run', 'utf8')))\"",
    "webpack": "webpack --mode production",
    "webpack:debug": "npm-run-all --aggregate-output -p extension:debug not-extension:debug",
    "tisk": "tsc -p .",
    "inspect": "npm-run-all tisk && node --inspect-brk ./out/debug-adapter.js --server=4711",
    "build:full": "npm-run-all --aggregate-output -p vice:choose tisk webpack && npm-run-all nonjs",
    "build:test": "npm-run-all --aggregate-output -p vice:choose mesen:test tisk webpack && npm-run-all nonjs:quick",
    "build:debug": "npm-run-all --aggregate-output -p tisk nonjs:quick",
    "vscode:prepublish:github": "npm-run-all build:full",
    "vscode:prepublish:local": "npm-run-all build:full test",
    "vscode:prepublish": "node -e \"process.exit(!process.env.GITHUB_ACTIONS)\" && npm-run-all vscode:prepublish:github || npm-run-all vscode:prepublish:local",
    "vscode:server:debug": "npm-run-all build:debug && npm-run-all extension:debug",
    "vscode:webviews:debug": "npm-run-all build:debug && npm-run-all not-extension:debug",
    "vscode:install": "npm-run-all package && codium --install-extension cc65-vice*.vsix || code --install-extension cc65-vice*.vsix",
    "vice:make": "cd ./src/__tests__/vicedir && node -e \"const shx = require('shelljs'); shx.config.fatal = true; const threads = require('os').cpus().length * 4; console.log('THREADS', threads); shx.exec('make -j' + threads)\"",
    "vice:configure:force": "cd ./src/__tests__/vicedir && bash ./configure --enable-headlessui --disable-pdf-docs --disable-portaudio",
    "vice:autogen:force": "cd ./src/__tests__/vicedir && bash ./autogen.sh",
    "vice:autogen": "shx test -e ./src/__tests__/vicedir/Makefile.in || npm-run-all vice:autogen:force",
    "vice:configure": "shx test -e ./src/__tests__/vicedir/Makefile || npm-run-all vice:autogen vice:configure:force",
    "vice:distclean": "cd ./src/__tests__/vicedir && make distclean",
    "vice:co": "env-cmd --silent -f build.env sh -c 'svn checkout svn://svn.code.sf.net/p/vice-emu/code/${VICE_SVN_VERSION:-trunk}/vice ./src/__tests__/vicedir && svn info ./src/__tests__/vicedir' || svn cleanup ./src/__tests__/vicedir",
    "vice:build": "npm-run-all vice:co vice:configure vice:make",
    "vice:local": "shx echo \"USING LOCAL VICE\"",
    "vice:choose": "env-cmd --silent -f ./build.env node -e \"typeof process.env.VICE_DIRECTORY != 'undefined' ? process.exit(0) : process.exit(1)\" && npm-run-all vice:local || npm-run-all vice:build",
    "lint": "tslint --project src",
    "jest": "env-cmd --silent -f build.env jest --coverage --forceExit",
    "jest:noncompile": "shx mv noncompile.testrun.json noncompile.old.testrun.json ; npm-run-all \"jest -- --json --outputFile noncompile.testrun.json --testPathIgnorePatterns src/__tests__/compile.test.ts\"",
    "jest:compile": "shx mv compile.testrun.json compile.old.testrun.json ; npm-run-all \"jest -- --json --outputFile compile.testrun.json src/__tests__/compile.test.ts\"",
    "test": "npm-run-all jest:compile jest:noncompile",
    "testmerge": "npm-run-all -c test test || node ./testrun-merge.js ./compile.old.testrun ./compile.testrun ./noncompile.old.testrun ./noncompile.testrun",
    "package": "vsce package --packageManager pnpm"
  },
  "fork-ts-checker": {
    "typescript": {
      "configFile": "src/tsconfig.json"
    }
  },
  "dependencies": {
    "@entan.gl/vice-rainbow-monitor": "^1.0.6",
    "await-notify": "1.0.1",
    "buffer": "^6.0.3",
    "classnames": "^2.2.6",
    "colors": "^1.4.0",
    "get-port": "^5.1.1",
    "hasbin": "^1.2.3",
    "lodash": "^4.17.15",
    "marked": "^4.0.10",
    "mathjs": "^9.5.0",
    "node-watch": "^0.7.1",
    "performance-now": "^2.1.0",
    "pngjs": "^5.0.0",
    "react": "16.14.0",
    "react-canvas-wrapper": "^0.5.1",
    "react-dom": "16.14.0",
    "react-tabs": "^3.1.2",
    "recursive-readdir": "^2.2.2",
    "semver": "^7.3.4",
    "tmp": "^0.1.0",
    "universal-analytics": "^0.4.23",
    "vscode-debugadapter": "1.38.0",
    "wait-port": "^0.2.7",
    "which": "^2.0.2"
  },
  "devDependencies": {
    "@entan.gl/vsce": "^1.79.6",
    "@types/classnames": "^2.2.11",
    "@types/jest": "^27.0.1",
    "@types/lodash": "^4.14.149",
    "@types/node": "^14.6.4",
    "@types/react": "16.14.2",
    "@types/react-tabs": "^2.3.2",
    "@types/semver": "^7.3.4",
    "@types/universal-analytics": "^0.4.4",
    "@types/vscode": "^1.54",
    "@types/webpack": "^4.41.25",
    "@types/webpack-dev-server": "^3.11.1",
    "@types/which": "^2.0.1",
    "dotenv": "^8.2.0",
    "env-cmd": "^10.1.0",
    "glob": "^7.1.6",
    "jest": "^27.0.6",
    "jest-junit": "^13.0.0",
    "node-fetch": "^3.0.0",
    "npm-run-all": "^4.1.5",
    "shebang-loader": "^0.0.1",
    "shelljs": "^0.8.4",
    "shx": "^0.3.2",
    "split-file": "^2.2.1",
    "ts-jest": "^27.0.5",
    "ts-loader": "^6.2.1",
    "ts-node": "^9.1.1",
    "tslint": "5.18.0",
    "tslint-etc": "^1.13.9",
    "typescript": "^4.5.5",
    "vscode-debugadapter-testsupport": "^1.49.0",
    "vscode-debugprotocol": "^1.49.0",
    "webpack": "^5.11.1",
    "webpack-cli": "^4.3.0",
    "webpack-dev-server": "^3.11.1"
  },
  "main": "./dist/extension",
  "activationEvents": [
    "onDebug",
    "onLanguage:c",
    "onLanguage:cpp",
    "onLanguage:ca65"
  ],
  "contributes": {
    "configuration": {
      "title": "CC65 VICE Debugger",
      "properties": {
        "cc65vice.enableCycleCounters": {
          "type": "boolean",
          "default": true,
          "description": "Show cycle counts next to lines and when selecting lines."
        },
        "cc65vice.cc65Home": {
          "type": [
            "string",
            "null"
          ],
          "default": null,
          "description": "The directory containing cc65. Set this if you don't want to use the builtin one."
        },
        "cc65vice.viceDirectory": {
          "type": [
            "string",
            "null"
          ],
          "default": null,
          "description": "The directory containing VICE Emulator. Set this if it's not on your path."
        },
        "cc65vice.mesenDirectory": {
          "type": [
            "string",
            "null"
          ],
          "default": null,
          "description": "The directory containing Mesen Emulator. Set this if it's not on your path."
        },
        "cc65vice.preferX64OverX64sc": {
          "type": "boolean",
          "default": false,
          "description": "Use X64, which is not recommended."
        },
        "cc65vice.disableMetrics": {
          "type": "boolean",
          "default": false,
          "description": "Turn off extension metric tracking."
        },
        "cc65vice.runAhead": {
          "type": "boolean",
          "default": true,
          "description": "When hitting a breakpoint, step ahead by one frame so that any screen updates that may have been made become visible immediately."
        }
      }
    },
    "commands": [
      {
        "command": "cc65-vice.toggleCycleCounters",
        "title": "CC65 VICE: Toggle cycle counters"
      }
    ],
    "breakpoints": [
      {
        "language": "c"
      },
      {
        "language": "ca65"
      }
    ],
    "languages": [
      {
        "id": "ca65",
        "aliases": [
          "6502/65816 Assembly",
          "ca65"
        ],
        "extensions": [
          ".asm",
          ".inc",
          ".s",
          ".a65"
        ],
        "configuration": "./syntaxes/language-configuration.json"
      }
    ],
    "grammars": [
      {
        "language": "ca65",
        "scopeName": "source.ca65",
        "path": "./syntaxes/ca65.tmLanguage.json"
      }
    ],
    "debuggers": [
      {
        "type": "cc65-vice",
        "label": "CC65 VICE debugger",
        "program": "./dist/debug-adapter.js",
        "runtime": "node",
        "configurationAttributes": {
          "attach": {
            "required": [
              "build",
              "port"
            ],
            "properties": {
              "stopOnEntry": {
                "type": "boolean",
                "description": "Automatically stop after hitting the beginning of main().",
                "default": true
              },
              "stopOnExit": {
                "type": "boolean",
                "description": "Automatically stop after hitting the end of main().",
                "default": true
              },
              "build": {
                "required": [
                  "cwd"
                ],
                "properties": {
                  "cwd": {
                    "type": "string",
                    "description": "The full absolute path to run your build command in",
                    "default": "${workspaceFolder}"
                  }
                }
              },
              "program": {
                "type": "string",
                "description": "The path to your d81, d64, or prg. Use this if autodetection fails."
              },
              "debugFile": {
                "type": "string",
                "description": "The debug file path. Use this if autodetection fails."
              },
              "mapFile": {
                "type": "string",
                "description": "The map file path. Use this if autodetection fails."
              },
              "port": {
                "type": "number",
                "description": "The port number to attach to in attach mode. This is the port configured with VICE's -binarymonitoraddress option.",
                "default": 6502
              },
              "trace": {
                "type": "boolean",
                "description": "Enable logging of the Debug Adapter Protocol.",
                "default": true
              }
            }
          },
          "launch": {
            "required": [
              "program",
              "debugFile",
              "mapFile",
              "build"
            ],
            "properties": {
              "build": {
                "required": [
                  "cwd"
                ],
                "properties": {
                  "command": {
                    "type": "string",
                    "description": "The executable to run",
                    "default": "make"
                  },
                  "args": {
                    "type": "array",
                    "description": "The arguments to use",
                    "default": [
                      "OPTIONS=debugfile,makefile,labelfile"
                    ]
                  },
                  "skip": {
                    "type": "boolean",
                    "description": "Skip building the program. May cause problems.",
                    "default": false
                  },
                  "cwd": {
                    "type": "string",
                    "description": "The full absolute path to run your build command in",
                    "default": "${workspaceFolder}"
                  }
                }
              },
              "stopOnEntry": {
                "type": "boolean",
                "description": "Automatically stop after hitting the beginning of main().",
                "default": true
              },
              "stopOnExit": {
                "type": "boolean",
                "description": "Automatically stop after hitting the end of main().",
                "default": true
              },
              "program": {
                "type": "string",
                "description": "The path to your d81, d64, or prg. Required."
              },
              "debugFile": {
                "type": "string",
                "description": "The debug file path. Required."
              },
              "mapFile": {
                "type": "string",
                "description": "The map file path. Required."
              },
              "emulatorArgs": {
                "type": "array",
                "description": "The arguments to pass to the emulator command line. You should at the very least set your model type here, since that is specific to the project."
              },
              "port": {
                "type": "number",
                "description": "The port number to use instead of a random one. This is the port configured with VICE's -binarymonitoraddress option.",
                "default": -1
              },
              "trace": {
                "type": "boolean",
                "description": "Enable logging of the Debug Adapter Protocol.",
                "default": true
              }
            }
          }
        },
        "initialConfigurations": [
          {
            "type": "cc65-vice",
            "request": "launch",
            "name": "CC65 Vice Launch",
            "build": {
              "cwd": "${workspaceFolder}",
              "command": "make",
              "skip": false,
              "args": [
                "OPTIONS=mapfile,labelfile,debugfile,debugtables"
              ]
            },
            "stopOnEntry": true,
            "stopOnExit": true,
            "emulatorArgs": [
              "-model",
              "ntsc"
            ]
          }
        ],
        "configurationSnippets": [
          {
            "label": "C64: CC65 VICE Debug",
            "description": "A configuration to debug a C64 CC65 project with VICE.",
            "body": {
              "type": "cc65-vice",
              "request": "launch",
              "name": "CC65 Vice Launch",
              "build": {
                "cwd": "^\"\\${workspaceFolder}\"",
                "command": "make",
                "skip": false,
                "args": [
                  "OPTIONS=mapfile,labelfile,debugfile"
                ]
              },
              "stopOnEntry": true,
              "stopOnExit": true,
              "emulatorArgs": [
                "-model",
                "ntsc"
              ]
            }
          }
        ],
        "variables": {
          "AskForProgramName": "extension.cc65-vice.getProgramName"
        }
      }
    ]
  }
}
